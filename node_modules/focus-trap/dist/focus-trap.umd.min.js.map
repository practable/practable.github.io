{"version":3,"file":"focus-trap.umd.min.js","sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event]\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target, e) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    const target = getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      const onPause = getOption(pauseOptions, 'onPause');\n      const onPostPause = getOption(pauseOptions, 'onPostPause');\n\n      state.paused = true;\n      onPause?.();\n\n      removeListeners();\n\n      onPostPause?.();\n      return this;\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      const onUnpause = getOption(unpauseOptions, 'onUnpause');\n      const onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n\n      state.paused = false;\n      onUnpause?.();\n\n      updateTabbableNodes();\n      addListeners();\n\n      onPostUnpause?.();\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["activeFocusTraps","activateTrap","trapStack","trap","length","activeTrap","pause","trapIndex","indexOf","splice","push","deactivateTrap","unpause","isTabEvent","e","key","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","_len","arguments","params","Array","_key","apply","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","elements","userOptions","doc","document","config","_objectSpread","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","includes","find","node","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","tabbableOptions","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","tagName","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKey","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref2","isFocusable","destinationGroupIndex","lastOfGroupIndex","_ref3","checkKeyNav","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean"],"mappings":"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"}